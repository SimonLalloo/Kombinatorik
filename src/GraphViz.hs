module GraphViz (visualizeUnlabelledGraph) where

import Data.Graph.Inductive (
  Gr,
  Graph (labEdges, labNodes, mkGraph),
 )
import Data.GraphViz (
  GraphvizCommand (Dot),
  GraphvizOutput (Png),
  GraphvizParams (isDirected),
  Labellable,
  graphToDot,
  nonClusteredParams,
  runGraphvizCommand,
 )
import Text.Printf (printf)

----------------------------------------
-------- Graph visualization -----------
----------------------------------------

-- Note: most of this code was generated by Claude, an AI chatbot

visualizeUnlabelledGraph :: Gr () () -> FilePath -> IO FilePath
visualizeUnlabelledGraph g path = do
  let labelledGraph = convertToLabelledGraph g
  visualizeGraph labelledGraph path

visualizeGraph :: (Labellable nl, Labellable el) => Gr nl el -> FilePath -> IO FilePath
visualizeGraph g path = do
  let dotGraph = graphToDot (nonClusteredParams{isDirected = False}) g
  runGraphvizCommand Dot dotGraph Png path

convertToLabelledGraph :: Gr () () -> Gr String String
convertToLabelledGraph g =
  let nodeList = labNodes g -- [(Node, ())]
      edgeList = labEdges g -- [(Node, Node, ())]
      labelledNodes = [(n, printf "Node %d" n) | (n, _) <- nodeList]
      labelledEdges = [(u, v, printf "Edge %d-%d" u v) | (u, v, _) <- edgeList]
   in mkGraph labelledNodes labelledEdges
