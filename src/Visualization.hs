module Visualization (visualizeUnlabelledGraph, visualizeDirectedUnlabelledGraph, makeHistogram) where

import Data.Graph.Inductive (
  Gr,
  Graph (labEdges, labNodes, mkGraph),
 )
import Data.GraphViz (
  GraphvizCommand (Dot),
  GraphvizOutput (Png),
  GraphvizParams (isDirected),
  Labellable,
  graphToDot,
  nonClusteredParams,
  runGraphvizCommand,
 )
import Data.List (group, sort)
import Graphics.Rendering.Chart.Backend.Cairo
import Graphics.Rendering.Chart.Easy
import Text.Printf (printf)

----------------------------------------
-------- Graph visualization -----------
----------------------------------------

-- Note: most of this code was generated by Claude, an AI chatbot

visualizeUnlabelledGraph :: Gr () () -> FilePath -> IO FilePath
visualizeUnlabelledGraph g path = do
  let labelledGraph = convertToLabelledGraph g
  visualizeGraph labelledGraph path

visualizeDirectedUnlabelledGraph :: Gr () () -> FilePath -> IO FilePath
visualizeDirectedUnlabelledGraph g path = do
  let labelledGraph = convertToLabelledGraph g
  visualizeDirectedGraph labelledGraph path

visualizeGraph :: (Labellable nl, Labellable el) => Gr nl el -> FilePath -> IO FilePath
visualizeGraph g path = do
  let dotGraph = graphToDot (nonClusteredParams{isDirected = False}) g
  runGraphvizCommand Dot dotGraph Png path

visualizeDirectedGraph :: (Labellable nl, Labellable el) => Gr nl el -> FilePath -> IO FilePath
visualizeDirectedGraph g path = do
  let dotGraph = graphToDot (nonClusteredParams{isDirected = True}) g
  runGraphvizCommand Dot dotGraph Png path

convertToLabelledGraph :: Gr () () -> Gr String String
convertToLabelledGraph g =
  let nodeList = labNodes g -- [(Node, ())]
      edgeList = labEdges g -- [(Node, Node, ())]
      labelledNodes = [(n, printf "Node %d" n) | (n, _) <- nodeList]
      labelledEdges = [(u, v, printf "Edge %d-%d" u v) | (u, v, _) <- edgeList]
   in mkGraph labelledNodes labelledEdges

----------------------------------------
------------- Histograms! --------------
----------------------------------------

makeHistogram :: [Int] -> String -> IO ()
makeHistogram values name = do
  let convertedData = map (\g -> (head g, length g)) $ group $ sort values
  generateGraph convertedData "test" ("out/" ++ name ++ ".png")

generateGraph :: (Show a, BarsPlotValue y) => [(a, y)] -> String -> FilePath -> IO ()
generateGraph values title path =
  toFile def path $ do
    layout_title .= "Sample Bars"
    layout_title_style . font_size .= 10
    layout_x_axis . laxis_generate .= autoIndexAxis (map (show . fst) values)
    plot $ plotBars <$> bars [title] (addIndexes (map ((: []) . snd) values))
